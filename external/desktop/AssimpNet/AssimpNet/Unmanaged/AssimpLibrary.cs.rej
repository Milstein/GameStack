***************
*** 1350,1357 ****
          public const String DefaultWindows32BitPath = "Assimp32.dll";
          public const String DefaultWindows64BitPath = "Assimp64.dll";
  
-         public const String DefaultLinux32BitPath = "Assimp32.so";
-         public const String DefaultLinux64BitPath = "Assimp64.so";
  
          public static AssimpLibraryImplementation CreateRuntimeImplementation() {
              if(IsLinux()) {
--- 1350,1357 ----
          public const String DefaultWindows32BitPath = "Assimp32.dll";
          public const String DefaultWindows64BitPath = "Assimp64.dll";
  
+ 		public const String DefaultLinux32BitPath = "libassimp";
+ 		public const String DefaultLinux64BitPath = "libassimp";
  
          public static AssimpLibraryImplementation CreateRuntimeImplementation() {
              if(IsLinux()) {
***************
*** 1559,1584 ****
  
          public override string DefaultLibraryPath32Bit {
              get {
-                 return AssimpDefaultLibraryPath.DefaultLinux32BitPath;
              }
          }
  
          public override string DefaultLibraryPath64Bit {
              get {
-                 return AssimpDefaultLibraryPath.DefaultLinux64BitPath;
              }
          }
  
-         [DllImport("libdl.so")]
          private static extern IntPtr dlopen(String fileName, int flags);
  
-         [DllImport("libdl.so")]
          private static extern IntPtr dlsym(IntPtr handle, String functionName);
  
-         [DllImport("libdl.so")]
          private static extern int dlclose(IntPtr handle);
  
-         [DllImport("libdl.so")]
          private static extern IntPtr dlerror();
  
          private const int RTLD_NOW = 2;
--- 1559,1614 ----
  
          public override string DefaultLibraryPath32Bit {
              get {
+ 				return AssimpDefaultLibraryPath.DefaultLinux32BitPath + LibExtension;
              }
          }
  
          public override string DefaultLibraryPath64Bit {
              get {
+ 				return AssimpDefaultLibraryPath.DefaultLinux64BitPath + LibExtension;
              }
          }
  
+ 		private static string LibExtension {
+ 			get {
+ 				return IsMacOsx ? ".dylib" : ".so";
+ 			}
+ 		}
+ 
+ 		private static bool IsMacOsx {
+ 			get {
+ 				IntPtr buf = IntPtr.Zero;
+ 				try {
+ 					buf = Marshal.AllocHGlobal(8192);
+ 					if(uname(buf) == 0) {
+ 						string os = Marshal.PtrToStringAnsi(buf);
+ 						if(os == "Darwin")
+ 							return true;
+ 					}
+ 				}
+ 				catch {
+ 				}
+ 				finally {
+ 					if (buf != IntPtr.Zero)
+ 						Marshal.FreeHGlobal(buf);
+ 				}
+ 				return false;
+ 			}
+ 		}
+ 
+ 		[DllImport("libc")]
+ 		private static extern int uname(IntPtr buf);
+ 
+         [DllImport("libdl")]
          private static extern IntPtr dlopen(String fileName, int flags);
  
+         [DllImport("libdl")]
          private static extern IntPtr dlsym(IntPtr handle, String functionName);
  
+         [DllImport("libdl")]
          private static extern int dlclose(IntPtr handle);
  
+         [DllImport("libdl")]
          private static extern IntPtr dlerror();
  
          private const int RTLD_NOW = 2;
