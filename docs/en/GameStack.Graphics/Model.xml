<Type Name="Model" FullName="GameStack.Graphics.Model">
  <TypeSignature Language="C#" Value="public class Model : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Model extends System.Object implements class System.IDisposable" />
  <AssemblyInfo>
    <AssemblyName>GameStack.Desktop</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Manages a model asset.</summary>
    <remarks>Model assets are produced by the pipeline tools and have the extension .model.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Model (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream stream) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">
        </param>
        <summary>Load a model asset from a stream.</summary>
        <remarks>The stream must contain the file image for a .model asset.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Model (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string path) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">Relative asset path to .model file.</param>
        <summary>
        </summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Animations">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,GameStack.Graphics.Animation&gt; Animations { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IDictionary`2&lt;string, class GameStack.Graphics.Animation&gt; Animations" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,GameStack.Graphics.Animation&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a collection of named animations included in the model.</summary>
        <value>
        </value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Must be called to release the model's buffers and materials.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Draw">
      <MemberSignature Language="C#" Value="public void Draw ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Draw() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Draw the entire model.</summary>
        <remarks>A camera must be in scope. If a material is in scope, it will override all mesh materials.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Draw">
      <MemberSignature Language="C#" Value="public void Draw (OpenTK.Matrix4 world);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Draw(valuetype OpenTK.Matrix4 world) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="world" Type="OpenTK.Matrix4" />
      </Parameters>
      <Docs>
        <param name="world">World transform applied to the draw operation.</param>
        <summary>Draw the entire model.</summary>
        <remarks>A camera must be in scope. If a material is in scope, it will override all mesh materials.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Draw">
      <MemberSignature Language="C#" Value="public void Draw (ref OpenTK.Matrix4 world);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Draw(valuetype OpenTK.Matrix4 world) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="world" Type="OpenTK.Matrix4&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="world">World transform applied to the draw operation.</param>
        <summary>Draw the entire model.</summary>
        <remarks>A camera must be in scope. If a material is in scope, it will override all mesh materials.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Meshes">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,GameStack.Graphics.Mesh&gt; Meshes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IDictionary`2&lt;string, class GameStack.Graphics.Mesh&gt; Meshes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,GameStack.Graphics.Mesh&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the collection of named meshes contained in the model.</summary>
        <value>
        </value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RootNode">
      <MemberSignature Language="C#" Value="public GameStack.Graphics.Node RootNode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class GameStack.Graphics.Node RootNode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>GameStack.Graphics.Node</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the model's root transform node.</summary>
        <value>
        </value>
        <remarks>The transform node hierarchy applies transforms to meshes and bones. These transforms can be animated over time.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
