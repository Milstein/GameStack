<Type Name="FrameBuffer" FullName="GameStack.Graphics.FrameBuffer">
  <TypeSignature Language="C#" Value="public class FrameBuffer : GameStack.Graphics.ScopedObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit FrameBuffer extends GameStack.Graphics.ScopedObject" />
  <AssemblyInfo>
    <AssemblyName>GameStack.Desktop</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>GameStack.Graphics.ScopedObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Provides the ability to render to a surface other than the viewport, allowing apps to use the output of the rendering to apply further effects.</summary>
    <remarks>GameStack always has at least one default frame buffer for drawing to the window. However, instances of this class can be created to draw to an alternate destination. This has many applications, such as applying special effects like mirror and blur. Whenever a frame buffer is placed into scope by calling Begin, all draws will be made to the buffer instead of the screen until it goes out of scope.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FrameBuffer (GameStack.Graphics.Texture texture, bool disposeTexture = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class GameStack.Graphics.Texture texture, bool disposeTexture) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="texture" Type="GameStack.Graphics.Texture" />
        <Parameter Name="disposeTexture" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="texture">Render to this texture.</param>
        <param name="disposeTexture">If true, automatically dispose the supplied texture when this object is disposed.</param>
        <summary>
        </summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearOnBegin">
      <MemberSignature Language="C#" Value="public bool ClearOnBegin { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ClearOnBegin" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Will the target texture be cleared on each frame?</summary>
        <value>
        </value>
        <remarks>Set to true if your app expects the texture to be empty before drawing. The texture is cleared to <see cref="P:GameStack.Graphics.FrameBuffer.Color" />.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Color">
      <MemberSignature Language="C#" Value="public OpenTK.Vector4 Color { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype OpenTK.Vector4 Color" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>OpenTK.Vector4</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the default clear color.</summary>
        <value>
        </value>
        <remarks>The buffer is only cleared when <see cref="P:GameStack.Graphics.FrameBuffer.ClearOnBegin" /> is true.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public override void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Dispose() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Must be called to release the frame buffer resources.</summary>
        <remarks>The attached texture may or may not be disposed depending on the constructor arguments.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Handle">
      <MemberSignature Language="C#" Value="public int Handle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Handle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the buffer's native handle.</summary>
        <value>
        </value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnBegin">
      <MemberSignature Language="C#" Value="protected override void OnBegin ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnBegin() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
        </summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnEnd">
      <MemberSignature Language="C#" Value="protected override void OnEnd ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnEnd() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
        </summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Save(class System.IO.Stream stream) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">
        </param>
        <summary>Write the contents of the frame buffer to the stream in PNG format.</summary>
        <remarks>This method is useful for saving screenshots of the buffer. The buffer must be in scope.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Save(string path) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">Path relative to user data location.</param>
        <summary>Write the contents of the frame buffer to the file in PNG format.</summary>
        <remarks>This method is useful for saving screenshots of the buffer. The buffer must be in scope.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Size">
      <MemberSignature Language="C#" Value="public System.Drawing.Size Size { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Size Size" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the size of the buffer's storage in pixels.</summary>
        <value>
        </value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
