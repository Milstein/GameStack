<Type Name="ScopedObject" FullName="GameStack.Graphics.ScopedObject">
  <TypeSignature Language="C#" Value="public abstract class ScopedObject : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ScopedObject extends System.Object implements class System.IDisposable" />
  <AssemblyInfo>
    <AssemblyName>GameStack.Desktop</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>An abstract base class for objects that can be added to and removed from the drawing scope.</summary>
    <remarks>
      <para>The drawing scope is a mechanism that GameStack uses to track the various components required to render an object. When a scoped object like a Camera or a Material is in scope, it will be used with drawing operations. In fact, many operations require a camera to be in scope. Some objects can be brought into scope to override defaults. For example, when a material is already in scope, a quad or sprite will use that material instead of its defaults.</para>
      <para>To bring a scoped object into scope, call <see cref="M:GameStack.Graphics.ScopedObject.Begin()" />. This method returns an object implementing <see cref="System.IDisposable" /> which, when disposed, will take the object back out of scope. This makes it possible to use C#'s <see langkey="using" /> keyword like so:<example><code>using(scopedObj.Begin()) { ... }</code></example></para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ScopedObject ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
        </summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Begin">
      <MemberSignature Language="C#" Value="public IDisposable Begin ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IDisposable Begin() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IDisposable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Brings the object into scope.</summary>
        <returns>Returns a stub object that, when disposed, takes this object back out of scope.</returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public virtual void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Must be called to release resources.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="End">
      <MemberSignature Language="C#" Value="public void End ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void End() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Takes the object out of scope.</summary>
        <remarks>This is an alternative way of taking the object out of scope. The other pattern is safer to use.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Find&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T Find&lt;T&gt; () where T : GameStack.Graphics.ScopedObject;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T Find&lt;(class GameStack.Graphics.ScopedObject) T&gt;() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>GameStack.Graphics.ScopedObject</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">The type of scoped object to search for.</typeparam>
        <summary>Scans for an object of the specified type in scope and returns it.</summary>
        <returns>The found object or null if none was found.</returns>
        <remarks>If multiple objects of the same type are in scope, this method returns the innermost object (i.e., the one most recently put into scope).</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnBegin">
      <MemberSignature Language="C#" Value="protected virtual void OnBegin ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnBegin() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Override to perform actions upon entering scope.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnEnd">
      <MemberSignature Language="C#" Value="protected virtual void OnEnd ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnEnd() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Override to perform actions upon leaving scope.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
