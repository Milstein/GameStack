<Type Name="SoundChannel" FullName="GameStack.SoundChannel">
  <TypeSignature Language="C#" Value="public class SoundChannel : GameStack.IWaitFor, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SoundChannel extends System.Object implements class GameStack.IWaitFor, class System.IDisposable" />
  <AssemblyInfo>
    <AssemblyName>GameStack.Desktop</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>GameStack.IWaitFor</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>A single sound channel through which one sound at a time may be played.</summary>
    <remarks>You may instantiate any number of sound channels, limited only by platform and hardware constraints.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SoundChannel ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
        </summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentSound">
      <MemberSignature Language="C#" Value="public GameStack.SoundEffect CurrentSound { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class GameStack.SoundEffect CurrentSound" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>GameStack.SoundEffect</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the sound that is currently playing, or the sound that was last played, or null if no sound has been played.</summary>
        <value>
        </value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Must be called to release sound channel resources.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GameStack.IWaitFor.Check">
      <MemberSignature Language="C#" Value="bool IWaitFor.Check ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool GameStack.IWaitFor.Check() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
        </summary>
        <returns>
        </returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPlaying">
      <MemberSignature Language="C#" Value="public bool IsPlaying { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPlaying" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Is a sound currently playing on this channel?</summary>
        <value>
        </value>
        <remarks>False if a sound has not been played or if a sound has finished playing.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Pause">
      <MemberSignature Language="C#" Value="public void Pause ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Pause() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Pause the current sound.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Play">
      <MemberSignature Language="C#" Value="public void Play ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Play() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Start or resume playing the current sound.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PlaySound">
      <MemberSignature Language="C#" Value="public void PlaySound (GameStack.SoundEffect effect, bool loop = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void PlaySound(class GameStack.SoundEffect effect, bool loop) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="effect" Type="GameStack.SoundEffect" />
        <Parameter Name="loop" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="effect">The sound to play.</param>
        <param name="loop">True to loop infinitely.</param>
        <summary>Set a new sound effect as the current sound and begin playing.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Stop playing and rewind to the beginning.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Volume">
      <MemberSignature Language="C#" Value="public float Volume { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 Volume" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the volume level.</summary>
        <value>A value between 0 or 1, with 0 being silent and 1 being maximum volume.</value>
        <remarks>Setting this property affects only this sound channel. Each sound channel controls its volume independently.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
